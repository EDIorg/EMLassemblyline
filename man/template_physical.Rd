% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/template_physical.R
\name{template_physical}
\alias{template_physical}
\title{Describe physical format of data objects}
\usage{
template_physical(
  path,
  data.path = path,
  data.table = NULL,
  other.entity = NULL,
  empty = FALSE,
  write.file = TRUE,
  overwrite = FALSE
)
}
\arguments{
\item{path}{(character) Path to the metadata template directory.}

\item{data.path}{(character) Path to the data directory.}

\item{data.table}{(character; optional) Table file name. If more than one, then supply 
as a vector of character strings (e.g. 
\code{data.table = c("nitrogen.csv", "decomp.csv")}).}

\item{other.entity}{(character; optional) Name of \code{other.entity}(s) in this 
dataset. Use \code{other.entity} for all non-\code{data.table} files. 
\code{other.entity}(s) should be stored at \code{data.path}. If more 
than one, then supply as a vector of character strings (e.g. 
\code{other.entity = c('ancillary_data.zip', 'quality_control.R')}).}

\item{empty}{(logical) Whether to write an empty template file.}

\item{write.file}{(logical; optional) Whether to write the template file. Default is \code{TRUE}.}

\item{overwrite}{(logical) Overwrite the template with new content?}
}
\value{
\item{physical}{Columns:
    \itemize{
    \item{objectName: File name of the data object.}
    \item{type: Object type. Can be: dataTable, otherEntity.}
    \item{entityName: A short descriptive name for the object.}
    \item{entityDescription: A more Description of the object.}
    \item{size: File size in bytes.}
    \item{authentication: File hash value.}
    \item{authentication_method: Method of calculating the file has value. Defaults to "MD5".}
    \item{numHeaderLines: Number of header lines. Only for dataTable types. Defaults to 1.}
    \item{recordDelimiter: Record delimiter (i.e. newline character). Only for dataTable types.}
    \item{attributeOrientation: Can be "column" or "row". Only for dataTable types. Defaults to "column".}
    \item{fieldDelimiter: Field delimiter. Only for dataTable types.}
    \item{quoteCharacter: Quote character used to enclose character type data. Can be "'" (i.e. single quote) or '"' (i.e. double quote). Only for dataTable types. Note: If editing with a spread sheet editor you may want to check the final result in a text editor to ensure the quote characters are accurately represented.}
    \item{entityType: The entity's type is typically the name of the type of data represented in the entity, such as "photograph". Only for otherEntity types.}
    \item{formatName: Format of data object. Only for otherEntity types.}
    \item{url: The publicly accessible URL from which the data object can be downloaded.}
    \item{numberOfRecords: Number of records of the data object. Only for dataTable types.}
    }
}
}
\description{
This is an optional template that can be used to define the 
physical format of data objects. The \code{make_eml()} function will 
automatically calculate these values if the physical template is absent or 
empty.

One use case of this template is to define the physical format of remote 
data that cannot be accessed and subsequently calculated by 
\code{make_eml()}.
}
\details{
\code{make_eml()} will calculate values for empty fields and ignore non-empty fields containing user specified values. This allows dynamic regeneration of physical metadata that is likely to change between versions, while allowing specification of unchanging content.
}
\examples{
\dontrun{

physical <- template_physical(
  path = "./metadata_templates",
  data.path = "./data_objects",
  data.table = c("decomp.csv", "nitrogen.csv"),
  other.entity = c("ancillary_data.zip", "processing_and_analysis.R")
)

}

}
