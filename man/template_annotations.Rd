% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/template_annotations.R
\name{template_annotations}
\alias{template_annotations}
\title{Create the annotations template}
\usage{
template_annotations(
  path,
  data.path = path,
  data.table = NULL,
  other.entity = NULL,
  default.annotations = NULL,
  eml.path = path,
  eml = NULL
)
}
\arguments{
\item{path}{(character) Path to the metadata template directory and where 
annotations.txt will be written.}

\item{data.path}{(character; optional) Path to the data directory. Defaults to 
\code{path}.}

\item{data.table}{(character; optional) Table name. If more than one, then supply as a 
vector of character strings (e.g. 
\code{data.table = c('nitrogen.csv', 'decomp.csv')}).}

\item{other.entity}{(character; optional) Other entity name. If more than one, then supply 
as a vector of character strings (e.g. 
\code{other.entity = c('maps.zip', 'analysis.R')}).}

\item{default.annotations}{(data frame; optional) Default annotations added to annotations.txt. 
EMLassemblyline specified defaults are used unless specifying your own 
(see note below). You can manually change these after annotations.txt
has been created.}

\item{eml.path}{(character; optional) Path to the EML directory. Use this if creating
annotations.txt for an EML file. Defaults to \code{path}.}

\item{eml}{(EML file; optional) An EML file located at \code{eml.path}. 
Use this if annotating an existing EML file.}
}
\value{
\strong{annotations.txt} The tab delimited annotations template, 
    pre-populated with default annotations, and containing the fields:
    \itemize{
      \item id - A unique identifier for the element being annotated.
      \item element - The element being annotated.
      \item context - The context of the subject (i.e. element value) being 
      annotated (e.g. If the same column name occurs in more than one data 
      tables, you will need to know which table it came from.).
      \item subject - The element value to be annotated.
      \item predicate_label - The predicate label (a.k.a. property) 
      describing the relation of the subject to the object. This label 
      should be copied directly from an ontology.
      \item predicate_uri - The predicate label URI copied directly from an 
      ontology.
      \item object_label - The object label (a.k.a. value) describing the 
      subject. This label should be copied directly from an ontology.
      \item object_uri - The object URI copied from an ontology.
    }
    The general user should ignore the id and element fields and focus on
    the subject, context predicate_label, predicate_uri, object_label, and 
    object_uri fields. Only the predicate and object fields should be 
    modified. If you want to add an annotation to any of the listed 
    subjects, simply copy the full row containing the subject, paste it in 
    as new line, and modify the predicate and object fields.
}
\description{
The annotations template (annotations.txt) lists the elements and 
    corresponding ontology terms for annotating your EML. Run this function 
    after all your EMLassemblyline metadata templates are complete or if 
    you're annotating an existing EML file. This function gathers 
    annotatable elements from your EML and assigns default predicate labels 
    and URIs. You must provide object labels and URIs from the ontology of 
    your choosing.
}
\note{
To set your own default annotations, copy the EMLassemblyline defaults 
    (\code{file.copy(from = system.file("/templates/annotation_defaults.txt", package = "EMLassemblyline"), to = path)}, 
    where path is where you want the file written to) then change the values 
    in the predicate_label, predicate_uri, object_label, and object_uri 
    fields, save the file, read it in to R as a data frame and use it with 
    the \code{default.annotations} argument.
    
    Some users may want to build annotations.txt from scratch. A few rules 
    to follow when doing this:
    \itemize{
      \item id - IDs must be unique for each unique subject.
      \item element - Supported elements and the required syntax is listed 
      under the element column of annotation_defaults.txt. View this file
      with \code{View(system.file("/templates/annotation_defaults.txt", package = "EMLassemblyline"))}
      \item context - Context values are only required for elements that are 
      nested within other elements. Currently only /dataTable/attribute 
      elements require context where the dataTable objectName is the context
      (e.g. nitrogen.csv).
      \item subject - Subjects are required for each annotation. For /dataset
      the subject is "dataset". For /dataTable the subject is the file name.
      For /dataTable/attribute the subjects are the dataTable field names. 
      For /otherEntity the subject is the file name. For /ResponsibleParty
      the subject is created with 
      \code{paste(first.name, middle.name, last.name, collapse = " ")}
    }
}
\examples{
# From a set of EMLassemblyline metadata templates ----------------------------
#
# Create annotations.txt for a dataset of data tables, other entities, and 
# described by EMLassemblyline metadata templates

# Copy templates and data objects to a temporary directory

file.copy(
  from = system.file("/examples/pkg_260", package = "EMLassemblyline"),
  to = tempdir(),
  recursive = TRUE
)
unlink(paste0(tempdir(), "/pkg_260/metadata_templates/annotations.txt"))

# Create annotations.txt

template_annotations(
 path = paste0(tempdir(), "/pkg_260/metadata_templates"),
 data.path = paste0(tempdir(), "/pkg_260/data_objects"),
 data.table = c("nitrogen.csv", "decomp.csv"),
 other.entity = c("ancillary_data.zip", "processing_and_analysis.R")
)

# View contents

df <- data.table::fread(
  paste0(tempdir(), "/pkg_260/metadata_templates/annotations.txt")
)
df

# Clean up temporary directory

unlink(paste0(tempdir(), "/pkg_260"), recursive = TRUE, force = TRUE)

# From an EML file ------------------------------------------------------------
#
# Create annotations.txt for an EML file

# Copy an EML file to a temporary directory

file.copy(
  from = system.file("/examples/eml/edi.260.3.xml", package = "EMLassemblyline"),
  to = tempdir(),
  recursive = TRUE
)

# Create annotations.txt

template_annotations(
 path = tempdir(),
 eml = "edi.260.3.xml"
)

# View contents

df <- data.table::fread(
 paste0(tempdir(), "/annotations.txt")
)
df

# Clean up temporary directory

unlink(paste0(tempdir(), "/edi.260.3.xml"), force = TRUE)
unlink(paste0(tempdir(), "/annotations.txt"), force = TRUE)   

}
