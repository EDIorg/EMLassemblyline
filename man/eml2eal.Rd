% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eml2eal.R
\name{eml2eal}
\alias{eml2eal}
\title{Create EAL inputs from an EML file}
\usage{
eml2eal(eml, path, file.type = ".txt")
}
\arguments{
\item{eml}{(character) Full path to EML file}

\item{path}{(character) Where outputs will be written}

\item{file.type}{(character) File type for abstract, methods, and additional info. Can be: ".txt", ".docx", or ".md". Default is ".txt".}
}
\value{
EAL templates and \code{make_eml()} function call
}
\description{
For when you want to work with EML in EAL but don't have the templates and make_eml() function call.
}
\details{
Each sub-process within this function maps EML to an EAL file based on XPaths and logic representing known communities of practice. Information losses are sent as warnings. Remember, EAL focuses on metadata facilitating reuse (e.g. creator's email address), not antiquated info (e.g. creator's telephone number).

Benefits of \code{file.type} differ. ".docx" supports basic formatting (super/sub scripts, italics, symbols, accented characters) but doesn't support bulleted lists and elaborately formatted equations. ".md" supports less formatting than ".docx" but is open source. ".txt" doesn't support any formatting but is a common file type.
}
\examples{
\dontrun{
# Create working directory
mydir <- paste0(tempdir(), "/pkg")
dir.create(mydir)

# Translate EML, w/unsupported content, to EAL templates. Note info loss 
# warnings.
eml <- system.file("eml2eal_test.xml", package = "EMLassemblyline")
eml2eal(eml, mydir)
dir(mydir)

# Clean up
unlink(mydir, recursive = TRUE)
}

}
