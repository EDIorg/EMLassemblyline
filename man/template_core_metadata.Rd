% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/template_core_metadata.R
\name{template_core_metadata}
\alias{template_core_metadata}
\title{Template core metadata (abstract, methods, keywords, personnel, license)}
\usage{
template_core_metadata(
      path,
      license,
      file.type = '.txt',
      write.file = TRUE,
      x = NULL
    )
}
\arguments{
\item{path}{(character) Path to the metadata template directory.}

\item{license}{(character) License to publicly release the data package under. Use
\href{https://creativecommons.org/publicdomain/zero/1.0/}{"CC0"} or 
\href{https://creativecommons.org/licenses/by/4.0/}{"CCBY"}.}

\item{file.type}{(character; optional) File type for abstract, methods, and additional 
info metadata templates. Can be: '.txt' (plain text), '.docx' (MS Word),
or '.md' (markdown).}

\item{write.file}{(logical; optional) Whether to write the template files.}

\item{x}{(named list; optional) Alternative input to 
\code{template_core_metadatta()}. Use \code{template_arguments()} 
to create \code{x}.}
}
\value{
\itemize{
        \item{\strong{abstract} The abstract template.}
        \item{\strong{additional_info} The template for miscellaneous
        information.}
        \item{\strong{intellectual_rights.txt} The intellectual rights 
        license with the text of CC0 or CCBY.}
        \item{\strong{keywords.txt} The tab delimited keywords template.}
        \item{\strong{methods} The methods template.}
        \item{\strong{personnel.txt} The tab delimited personnel template 
        for information on persons and funding involved in the creation of 
        the data package.}
        \item{These files is written to \code{path} unless using \code{x},
        in which case the templates are added to 
        \strong{/x/templates}.}
    }
}
\description{
Use this function to create the core metadata templates required by 
    all data packages. Most templates require user supplied information.
    \href{https://ediorg.github.io/EMLassemblyline/articles/edit_metadata_templates.html}{Instructions for editing these templates.}
}
\details{
Existing templates will not be overwritten by \code{template_core_metadata()}.
}
\examples{
# Initialize data package directory for template_core_metadata()
file.copy(
  from = system.file('/examples/pkg_250', package = 'EMLassemblyline'),
  to = tempdir(),
  recursive = TRUE
)

# Set working directory
setwd(paste0(tempdir(), '/pkg_250'))

# View directory contents (NOTE: Directory is empty)
dir('./metadata_templates')

# Template core metadata
template_core_metadata(
  path = './metadata_templates',
  license = 'CC0'
)

# View directory contents (NOTE: Templates exist)
dir('./metadata_templates')

# Rerunning template_core_metadata() does not overwrite files
template_core_metadata(
  path = './metadata_templates',
  license = 'CC0'
)

# Use docx files for abstract, methods, and additional_info
# First remove abstract, methods, and additional_info templates
file.remove(
  c(
    './metadata_templates/abstract.txt',
    './metadata_templates/methods.txt',
    './metadata_templates/additional_info.txt'
  )
)

# Create docx templates
template_core_metadata(
  path = './metadata_templates',
  license = 'CC0',
  file.type = '.docx'
)

# Use md files for abstract, methods, and additional_info
# First remove abstract, methods, and additional_info templates
file.remove(
  c(
    './metadata_templates/abstract.docx',
    './metadata_templates/methods.docx',
    './metadata_templates/additional_info.docx'
  )
)

# Create md templates
template_core_metadata(
  path = './metadata_templates',
  license = 'CC0',
  file.type = '.md'
)

# Clean up
unlink('.', recursive = TRUE)
    
}
