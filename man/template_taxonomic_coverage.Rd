% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/template_taxonomic_coverage.R
\name{template_taxonomic_coverage}
\alias{template_taxonomic_coverage}
\title{Create taxonomic coverage template}
\usage{
template_taxonomic_coverage(
      path,
      data.path = path,
      taxa.table,
      taxa.col,
      taxa.name.type,
      taxa.authority,
      write.file = TRUE,
      x = NULL
    )
}
\arguments{
\item{path}{(character) Path to the metadata template directory.}

\item{data.path}{(character) Path to the data directory.}

\item{taxa.table}{(character) Table name containing \code{taxa.col}. If inputting more 
than one table, then supply as a list (e.g. 
\code{c('table.1', 'table.2')}).}

\item{taxa.col}{(character) Column name containing taxa names. Species binomials are
accepted. If inputting more than one table, then supply as a list
\code{c('taxa.col.table.1', 'taxa.col.table.2')}.}

\item{taxa.name.type}{(character) Taxa name type. Can be: 
\code{scientific}, \code{common}, or \code{both}.}

\item{taxa.authority}{(integer) Taxonomic authorities to resolve to as an ordered numeric vector 
of ID's decreasing in preference. See the list of supported authorities 
with \code{taxonomyCleanr::view_taxa_authorities()}. Columns 
"resolve_sci_taxa", and "resolve_comm_taxa" list authorites supporting 
scientific and common searches, respectively.}

\item{write.file}{(logical; optional) Whether to write the template file.}

\item{x}{(named list; optional) Alternative input to 
\code{template_taxonomic_coverage()}. Use \code{template_arguments()} 
to create \code{x}.}
}
\value{
\strong{taxonomic_coverage.txt} The tab delimited taxonomic coverage 
    template. This file is written to \code{path} unless using \code{x},
    in which case the template is added to 
    \strong{/x/templates/taxonomic_coverage.txt}. Non-resolved taxa result 
    NA.
}
\description{
Use this function to extract the unique taxa of a data table and 
    try to resolve (match) to a taxonomic authority system (e.g. 
    \href{https://www.itis.gov/}{ITIS}) and return for user supplied 
    inputs if necessary. This information is later used to list the full
    hierarchical rank names in the metadata.
    \href{https://ediorg.github.io/EMLassemblyline/articles/edit_metadata_templates.html}{Instructions for editing this template.}
}
\details{
\code{template_taxonomic_coverage()} searches the most preferred 
    taxonomic authority for all unique taxa listed in \code{taxa.col} 
    returning the authority name and corresponding taxa identifier for 
    direct matches (no fuzzy searching), then the next most preferred 
    taxonomic authority is search for taxa that have not yet been resolved. 
    This process repeats for subsequently listed authorities. "NA" is 
    returned when an authority match is not made.
    
    When taxonomic_coverage.txt is passed to \code{make_eml()}, the 
    authority information is used to get the hierarchical rank names of 
    resolved taxa and rendered into the "taxonomicCoverage" element of EML.
    
    Existing taxonomic_coverage.txt will not be overwritten by subsequent 
    calls to \code{template_taxonomic_coverage()}.
    
    Character encoding of metadata extracted directly from the tables are 
    converted to UTF-8 via \code{enc2utf8()}.
}
\examples{
# Initialize data package directory for template_taxonomic_coverage()
file.copy(
  from = system.file('/examples/pkg_255', package = 'EMLassemblyline'),
  to = tempdir(),
  recursive = TRUE
)

# Set working directory
setwd(paste0(tempdir(), '/pkg_255'))

# View directory contents (NOTE: taxonomic_coverage.txt doesn't exist)
dir('./metadata_templates')

# Template taxonomic coverage
template_taxonomic_coverage(
  path = './metadata_templates',
  data.path = './data_objects',
  taxa.table = 'decomp.csv',
  taxa.col = 'taxa',
  taxa.authority = c(3,11),
  taxa.name.type = 'scientific'
)

# View directory contents (NOTE: taxonomic_coverage.txt exists)
dir('./metadata_templates')

# Rerunning template_taxonomic_coverage() does not overwrite file
template_taxonomic_coverage(
  path = './metadata_templates',
  data.path = './data_objects',
  taxa.table = 'decomp.csv',
  taxa.col = 'taxa',
  taxa.authority = c(3,11),
  taxa.name.type = 'scientific'
)

# Clean up
unlink('.', recursive = TRUE)

}
