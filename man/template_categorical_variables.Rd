% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/template_categorical_variables.R
\name{template_categorical_variables}
\alias{template_categorical_variables}
\title{Create categorical variables template}
\usage{
template_categorical_variables(path, data.path = path, write.file = TRUE)
}
\arguments{
\item{path}{(character) Path to the metadata template directory.}

\item{data.path}{(character) Path to the data directory.}

\item{write.file}{(logical; optional) Whether to write the template file.}
}
\value{
\item{catvars_tablename.txt}{The tab delimited categorical variable template, where "tablename" is the table name from which the variables were extracted. This file is written to \code{path}}.
\item{list of data frames}{A list of data frames. One for each categorical variables template.}
}
\description{
Use this function after table attributes templates are complete. It uses information in attribute templates to extract the unique categorical variables from the corresponding data table.
    table and return for user supplied definitions. 
    \href{https://ediorg.github.io/EMLassemblyline/articles/edit_metadata_templates.html}{Instructions for editing this template.}
}
\details{
\code{template_categorical_variables()} knows which columns of a table
    are \code{categorical} based on their definition under the \code{class} 
    column of the attributes_*.txt template.
    
    An existing categorical variables template will not be overwritten 
    by subsequent calls to \code{template_categorical_variables()}.
}
\examples{
# Initialize data package directory for template_categorical_variables()
file.copy(
  from = system.file('/examples/pkg_255', package = 'EMLassemblyline'),
  to = tempdir(),
  recursive = TRUE
)

# Set working directory
setwd(paste0(tempdir(), '/pkg_255'))

# Template categorical variables
catvars <- template_categorical_variables(
  path = './metadata_templates',
  data.path = './data_objects')
catvars

# View directory contents (NOTE: catvars_*.txt files exist)
dir('./metadata_templates')

# Clean up
unlink('.', recursive = TRUE)

}
