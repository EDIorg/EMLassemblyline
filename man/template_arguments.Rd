% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/template_arguments.R
\name{template_arguments}
\alias{template_arguments}
\title{Create a list of inputs to EMLassemblyline functions (primarily for internal use only)}
\usage{
template_arguments(
  path = NULL,
  data.path = NULL,
  data.table = NULL,
  spatial.raster = NULL,
  spatial.vector = NULL,
  other.entity = NULL,
  data.objects = NULL,
  sep = NULL,
  empty = FALSE
)
}
\arguments{
\item{path}{(character) Path to the directory containing \code{EMLassemblyline} 
metadata templates.}

\item{data.path}{(character) Path to the directory containing \code{data.table} and 
\code{other.entity} data objects.}

\item{data.table}{(character) File names of data tables. If more than one, then supply as 
a vector (e.g. \code{data.table = c('decomp.csv', 'nitrogen.csv')}).}

\item{spatial.raster}{(character) File names of raster files. If more than one, then supply as 
a vector.}

\item{spatial.vector}{(character) File names of vector files. If more than one, then supply as 
a vector.}

\item{other.entity}{(character) File names of other entity data objects. If more than one, 
then supply as a vector (e.g. 
\code{other.entity = c('ancillary_data.zip', 'processing_and_analysis.R')}).}

\item{data.objects}{(character) File names of data objects. This generalizes 
data read operations and is no less accurate than using \code{data.table} or
\code{other.entity}. However, specific data types (e.g. \code{data.table} 
and \code{other.entity}) should be used to declare which entity type the 
data object will be listed under in the finalized EML metadata.}

\item{sep}{(character) Data table field delimiter. Use this if this function fails
to read your \code{data.table}.}

\item{empty}{(logical) Initialize the output with a set of empty metadata templates?
This option is useful when wanting to transfer metadata directly into
the template files without having to call the templating functions.}
}
\value{
(named list) A list of all \code{EMLassemblyline} arguments, specified 
    metadata templates and data objects.
}
\description{
Initialize the full list of possible inputs to \code{EMLassemblyline}
    functions (i.e. function arguments, metadata templates, and data 
    objects). This enables bridging of upstream metadata and data sources 
    (e.g. metabases, databases, Excel files, web forms, etc.).
}
\details{
Character encoding in tabular metadata templates is converted to UTF-8 
    via \code{enc2utf8()}. Characters in TextType metadata templates are not
    yet converted. Note: This may lead to an inaccuracy and disconnect 
    between values in the data objects and what is reported in the EML (e.g.
    a categorical variable listed in the EML may not be the same as it's 
    corresponding value in the data object). To reduce the chance of this,
    warnings are issued if the input data object from which the metadata was
    extracted is not UTF-8 encoded.
}
\examples{
# Output arguments and empty versions of metadata templates

r <- template_arguments(empty = TRUE)

# Output arguments, completed versions of metadata templates, and data objects

mydir <- file.copy(
  system.file('/examples/pkg_260', package = 'EMLassemblyline'), 
  tempdir(),
  recursive = TRUE)

setwd(paste0(tempdir(), "/pkg_260"))

r <- template_arguments(
  path = "./metadata_templates",
  data.path = "./data_objects",
  data.table = c("decomp.csv", "nitrogen.csv"),
  spatial.raster = "geotiff_test_file.tif",
  spatial.vector = c("shapefile_test", "geojson_test_file.GeoJSON"),
  other.entity = c("ancillary_data.zip", "processing_and_analysis.R"))
    
}
